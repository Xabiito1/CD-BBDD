DIFICULTAD: Muy fácil

-- 1. Devuelve todas las películas
SELECT 
    * 
FROM 
    PUBLIC.MOVIES;

-- 2. Devuelve todos los géneros existentes
SELECT 
    * 
FROM 
    PUBLIC.GENRES;

-- 3. Devuelve la lista de todos los estudios de grabación que estén activos
SELECT 
    *
FROM 
    PUBLIC.STUDIOS 
WHERE 
    STUDIO_ACTIVE = 1;

-- 4. Devuelve una lista de los 20 últimos miembros en anotarse al videoclub
SELECT 
    TOP 20 * 
FROM 
    PUBLIC.MEMBERS 
ORDER BY 
    MEMBER_DISCHARGE_DATE DESC;

DIFICULTAD: Fácil

-- 5. Devuelve las 20 duraciones de películas más frecuentes, ordenados de mayor a menor.
SELECT 
    MOVIE_DURATION, COUNT(*) as frecuencia
FROM 
    PUBLIC.MOVIES 
GROUP BY 
    MOVIE_DURATION
ORDER BY 
    frecuencia DESC
LIMIT 
    20;

-- 6. Devuelve las películas del año 2000 en adelante que empiecen por la letra A.
SELECT 
    * 
FROM 
    PUBLIC.MOVIES 
WHERE 
    YEAR(MOVIE_LAUNCH_DATE) >= 2000 AND UPPER(MOVIE_NAME) LIKE 'A%' 
ORDER BY 
    MOVIE_LAUNCH_DATE;

-- 7. Devuelve los actores nacidos un mes de Junio
SELECT 
    * 
FROM 
    PUBLIC.ACTORS 
WHERE 
    MONTH(ACTOR_BIRTH_DATE) = 06;

-- 8. Devuelve los actores nacidos cualquier mes que no sea Junio y que sigan vivos.
SELECT 
    * 
FROM 
    PUBLIC.ACTORS 
WHERE 
    MONTH(ACTOR_BIRTH_DATE) != 06 AND ACTOR_DEAD_DATE IS NULL;

-- 9. Devuelve el nombre y la edad de todos los directores menores o iguales de 50 años que estén vivos
SELECT 
    DIRECTOR_NAME, YEAR(CURRENT_DATE) - YEAR(DIRECTOR_BIRTH_DATE) AS edad
FROM 
    PUBLIC.DIRECTORS
WHERE 
    YEAR(CURRENT_DATE) - YEAR(DIRECTOR_BIRTH_DATE) <= 50 AND DIRECTOR_DEAD_DATE IS NULL;

-- 10. Devuelve el nombre y la edad de todos los actores menores de 50 años que hayan fallecido
SELECT 
    ACTOR_NAME, YEAR(ACTOR_DEAD_DATE) - YEAR(ACTOR_BIRTH_DATE) AS edad
FROM 
    PUBLIC.ACTORS
WHERE 
    YEAR(ACTOR_DEAD_DATE) - YEAR(ACTOR_BIRTH_DATE) < 50 AND ACTOR_DEAD_DATE  IS NOT NULL;

-- 11. Devuelve el nombre de todos los directores menores o iguales de 40 años que estén vivos
SELECT 
    DIRECTOR_NAME
FROM 
    PUBLIC.DIRECTORS
WHERE 
    YEAR(CURRENT_DATE) - YEAR(DIRECTOR_BIRTH_DATE) <= 40 AND DIRECTOR_DEAD_DATE IS NULL;

-- 12. Indica la edad media de los directores vivos
SELECT 
    AVG(YEAR(CURRENT_DATE) - YEAR(DIRECTOR_BIRTH_DATE)) AS edad_media
FROM 
    PUBLIC.DIRECTORS
WHERE 
    DIRECTOR_DEAD_DATE IS NULL;

-- 13. Indica la edad media de los actores que han fallecido
SELECT 
    AVG(YEAR(CURRENT_DATE) - YEAR(ACTOR_BIRTH_DATE)) AS "average_age"
FROM 
    PUBLIC.ACTORS
WHERE 
    ACTOR_DEAD_DATE IS NOT NULL;

DIFICULTAD: Media

-- 14. Devuelve el nombre de todas las películas y el nombre del estudio que las ha realizado
SELECT
	MOVIE_NAME,
	STUDIO_NAME
FROM
	PUBLIC.MOVIES m
INNER JOIN PUBLIC.STUDIOS s ON
	m.STUDIO_ID = s.STUDIO_ID;

-- 15. Devuelve los miembros que alquilaron al menos una película entre el año 2010 y el 2015
SELECT
	DISTINCT MEMBER_NAME
FROM
	PUBLIC.MEMBERS me
INNER JOIN PUBLIC.MEMBERS_MOVIE_RENTAL mr ON
	me.MEMBER_ID = mr.MEMBER_ID
INNER JOIN MOVIES m ON
	mr.MOVIE_ID = m.MOVIE_ID
WHERE
	YEAR(mr.MEMBER_RENTAL_DATE) BETWEEN 2010 AND 2015;

-- 16. Devuelve cuantas películas hay de cada país
SELECT
	n.NATIONALITY_NAME AS COUNTRY,
	COUNT(m.MOVIE_ID) AS MOVIES
FROM
	NATIONALITIES n
LEFT JOIN MOVIES m ON
	n.NATIONALITY_ID = m.NATIONALITY_ID
GROUP BY
	n.NATIONALITY_NAME
ORDER BY 
	COUNT(m.MOVIE_ID) 
DESC;

-- 17. Devuelve todas las películas que hay de género documental
SELECT
	m.MOVIE_NAME AS Movie
FROM
	MOVIES m
INNER JOIN GENRES g ON
	m.GENRE_ID = g.GENRE_ID
WHERE
	g.GENRE_NAME = 'Documentary';

-- 18. Devuelve todas las películas creadas por directores nacidos a partir de 1980 y que todavía están vivos
SELECT
	m.MOVIE_NAME AS MOVIE
FROM
	MOVIES m
INNER JOIN DIRECTORS d ON
	m.DIRECTOR_ID = d.DIRECTOR_ID
WHERE
	YEAR(d.DIRECTOR_BIRTH_DATE) >= 1980
	AND DIRECTOR_DEAD_DATE IS NULL;

-- 19. Indica si hay alguna coincidencia de nacimiento de ciudad (y si las hay, indicarlas) entre los miembros del videoclub y los directores.
SELECT
	m.MEMBER_NAME AS "Member",
	d.DIRECTOR_NAME AS "Director",
	m.MEMBER_TOWN AS "Birth Place"
FROM
	MEMBERS m,
	DIRECTORS d
WHERE 
	m.MEMBER_TOWN = d.DIRECTOR_BIRTH_PLACE;

-- 20. Devuelve el nombre y el año de todas las películas que han sido producidas por un estudio que actualmente no esté activo
SELECT
	m.MOVIE_NAME AS "Movie",
	YEAR(m.MOVIE_LAUNCH_DATE) AS "Year"
FROM
	MOVIES m
INNER JOIN STUDIOS s ON
	m.STUDIO_ID = s.STUDIO_ID
WHERE
	s.STUDIO_ACTIVE IS FALSE
ORDER BY
	m.MOVIE_NAME ASC;

-- 21. Devuelve una lista de las últimas 10 películas que se han alquilado
SELECT
	m.MOVIE_NAME AS "Movie"
FROM
	MOVIES m
INNER JOIN MEMBERS_MOVIE_RENTAL mr ON
	m.MOVIE_ID = mr.MOVIE_ID
ORDER BY
	mr.MEMBER_RENTAL_DATE DESC
LIMIT 10;

-- 22. Indica cuántas películas ha realizado cada director antes de cumplir 41 años
SELECT
	d.DIRECTOR_NAME AS "Director",
	COUNT(m.MOVIE_ID) AS "Number of Films"
FROM 
	MOVIES m
INNER JOIN DIRECTORS d ON
	m.DIRECTOR_ID = d.DIRECTOR_ID
WHERE
	m.MOVIE_LAUNCH_DATE < DATEADD(YEAR,
	41,
	d.DIRECTOR_BIRTH_DATE)
GROUP BY
	d.DIRECTOR_ID,
	d.DIRECTOR_NAME
ORDER BY 
	COUNT(m.MOVIE_ID) DESC;

-- 23. Indica cuál es la media de duración de las películas de cada director
SELECT
	d.DIRECTOR_NAME AS "Director",
	AVG(m.MOVIE_DURATION) AS "Average Duration"
FROM
	DIRECTORS d
INNER JOIN MOVIES m ON
	d.DIRECTOR_ID = m.DIRECTOR_ID
GROUP BY
	d.DIRECTOR_ID,
	d.DIRECTOR_NAME
ORDER BY
	AVG(m.MOVIE_DURATION) DESC;

-- 24. Indica cuál es el nombre y la duración mínima de las películas que han sido alquiladas en los últimos 2 años por los miembros del videoclub (La "fecha de ejecución" en este script es el 25-01-2019)
SELECT
	m.MOVIE_NAME AS "Movie",
	m.MOVIE_DURATION AS "Min Duration"
FROM 
	MOVIES m
INNER JOIN MEMBERS_MOVIE_RENTAL mr ON
	m.MOVIE_ID = mr.MOVIE_ID
INNER JOIN MEMBERS me ON
	mr.MEMBER_ID = me.MEMBER_ID
WHERE
	mr.MEMBER_RENTAL_DATE >= DATE_SUB('2019-01-25',
	INTERVAL 2 YEAR)
GROUP BY
	m.MOVIE_ID,
	m.MOVIE_NAME
ORDER BY
	m.MOVIE_DURATION LIMIT 1;

-- 25. Indica el número de películas que hayan hecho los directores durante las décadas de los 60, 70 y 80 que contengan la palabra "The" en cualquier parte del título
SELECT
	d.DIRECTOR_NAME AS "Director",
	COUNT(*) AS "Number of Movies"
FROM
	DIRECTORS d
JOIN
    MOVIES m ON
	d.DIRECTOR_ID = m.DIRECTOR_ID
WHERE
	UPPER(m.MOVIE_NAME) LIKE '%THE%'
	AND m.MOVIE_LAUNCH_DATE >= DATE '1960-01-01' AND m.MOVIE_LAUNCH_DATE < DATE '1989-12-31'
GROUP BY
	d.DIRECTOR_NAME;

DIFICULTAD: Difícil

-- 26. Lista nombre, nacionalidad y director de todas las películas
SELECT 
	m.MOVIE_NAME AS "Movie",
	n.NATIONALITY_NAME AS "Nationality",
	d.DIRECTOR_NAME AS "Director"
FROM
	MOVIES m
INNER JOIN DIRECTORS d ON
	m.DIRECTOR_ID = d.DIRECTOR_ID
INNER JOIN NATIONALITIES n ON
	m.NATIONALITY_ID = n.NATIONALITY_ID
ORDER BY
	m.MOVIE_NAME ASC;


-- 27. Muestra las películas con los actores que han participado en cada una de ellas
SELECT
	DISTINCT
	m.MOVIE_NAME AS "Movie",
	GROUP_CONCAT(a.ACTOR_NAME
ORDER BY
	a.ACTOR_NAME ASC) AS "Actores"
FROM
	MOVIES m
INNER JOIN MOVIES_ACTORS ma ON
	m.MOVIE_ID = ma.MOVIE_ID
INNER JOIN ACTORS a ON
	ma.ACTOR_ID = a.ACTOR_ID
GROUP BY
	m.MOVIE_ID,
	m.MOVIE_NAME
ORDER BY
	m.MOVIE_NAME ASC;

-- 28. Indica cual es el nombre del director del que más películas se han alquilado
SELECT
	DISTINCT 
	m.MOVIE_NAME AS "Movie",
	GROUP_CONCAT(a.ACTOR_NAME
ORDER BY
	a.ACTOR_NAME ASC) AS "Actores"
FROM
	MOVIES m
INNER JOIN MOVIES_ACTORS ma ON
	m.MOVIE_ID = ma.MOVIE_ID
INNER JOIN ACTORS a ON
	ma.ACTOR_ID = a.ACTOR_ID
GROUP BY
	m.MOVIE_ID
ORDER BY
	m.MOVIE_NAME ASC;

-- 29. Indica cuantos premios han ganado cada uno de los estudios con las películas que han creado
SELECT 
	s.STUDIO_NAME AS "Studio",
	COUNT(DISTINCT aw.AWARD_ID) AS "Awards"
FROM
	STUDIOS s
INNER JOIN MOVIES m ON
	s.STUDIO_ID = m.STUDIO_ID
INNER JOIN AWARDS aw ON
	m.MOVIE_ID = aw.MOVIE_ID
GROUP BY
	s.STUDIO_ID,
	s.STUDIO_NAME
ORDER BY
	"Awards" DESC;

-- 30. Indica el número de premios a los que estuvo nominado un actor, pero que no ha conseguido (Si una película está nominada a un premio, su actor también lo está)
SELECT
    AC.ACTOR_NAME,
    SUM(A.AWARD_ALMOST_WIN) AS AWARD_NOMINATION
FROM
    PUBLIC.MOVIES M
INNER JOIN PUBLIC.AWARDS A ON
    A.MOVIE_ID = M.MOVIE_ID
INNER JOIN PUBLIC.MOVIES_ACTORS MA ON
    MA.MOVIE_ID = M.MOVIE_ID
INNER JOIN PUBLIC.ACTORS AC ON
    AC.ACTOR_ID = MA.ACTOR_ID
GROUP BY
    AC.ACTOR_NAME;

-- 31. Indica cuantos actores y directores hicieron películas para los estudios no activos
SELECT
    COUNT(DISTINCT M.DIRECTOR_ID) AS DIRECTOR_NUMBER,
    COUNT(DISTINCT MA.ACTOR_ID) AS ACTOR_NUMBER
FROM
    STUDIOS S
INNER JOIN MOVIES M ON
    M.STUDIO_ID = S.STUDIO_ID
INNER JOIN MOVIES_ACTORS MA ON
    MA.MOVIE_ID = M.MOVIE_ID
WHERE
    S.STUDIO_ACTIVE = FALSE

-- 32. Indica el nombre, ciudad, y teléfono de todos los miembros del videoclub que hayan alquilado películas que hayan sido nominadas a más de 150 premios y ganaran menos de 50
SELECT
	DISTINCT me.MEMBER_NAME,
	me.MEMBER_TOWN,
	me.MEMBER_PHONE
FROM
	MEMBERS me
INNER JOIN PUBLIC.MEMBERS_MOVIE_RENTAL mr ON
	me.MEMBER_ID = mr.MEMBER_ID
INNER JOIN PUBLIC.MOVIES m ON
	mr.MOVIE_ID = m.MOVIE_ID
INNER JOIN AWARDS aw ON
	m.MOVIE_ID = aw.MOVIE_ID
WHERE
	aw.AWARD_NOMINATION > 150
	AND aw.AWARD_WIN < 50;

-- 33. Comprueba si hay errores en la BD entre las películas y directores (un director fallecido en el 76 no puede dirigir una película en el 88)
SELECT
	m.MOVIE_NAME,
	m.MOVIE_LAUNCH_DATE,
	d.DIRECTOR_DEAD_DATE
FROM
	PUBLIC.MOVIES m
INNER JOIN DIRECTORS d ON
	m.DIRECTOR_ID = d.DIRECTOR_ID
WHERE
	m.MOVIE_LAUNCH_DATE > d.DIRECTOR_DEAD_DATE
ORDER BY
	MOVIE_LAUNCH_DATE;

-- 34. Utilizando la información de la sentencia anterior, modifica la fecha de defunción a un año más tarde del estreno de la película (mediante sentencia SQL)
UPDATE
    DIRECTORS
SET
    DIRECTOR_DEAD_DATE =(
    SELECT
        MAX(DATEADD(YEAR, 1, M.MOVIE_LAUNCH_DATE)) AS POST_MOVIE_LAUNCH_DATE
    FROM
        MOVIES M
    INNER JOIN DIRECTORS D ON
        M.DIRECTOR_ID = D.DIRECTOR_ID
    WHERE
        D.DIRECTOR_DEAD_DATE IS NOT NULL
        AND D.DIRECTOR_DEAD_DATE < M.MOVIE_LAUNCH_DATE
        AND D.DIRECTOR_ID = DIRECTORS.DIRECTOR_ID
    GROUP BY
        DIRECTOR_NAME,
        DIRECTOR_DEAD_DATE)
WHERE
    DIRECTOR_ID IN (
    SELECT
        DISTINCT D.DIRECTOR_ID
    FROM
        MOVIES M
    INNER JOIN DIRECTORS D ON
        M.DIRECTOR_ID = D.DIRECTOR_ID
    WHERE
        D.DIRECTOR_DEAD_DATE IS NOT NULL
        AND D.DIRECTOR_DEAD_DATE < M.MOVIE_LAUNCH_DATE )

DIFICULTAD: Berserk mode (enunciados simples, mucha diversión...)

-- 35. Indica cuál es el género favorito de cada uno de los directores cuando dirigen una película
SELECT
    GROUPID.DIRECTOR_NAME,
    GROUP_CONCAT(GROUPID.GENRE_NAME) AS GENRE_NAME
FROM
    (
    SELECT
        COUNT(G.GENRE_NAME) AS NUM_MOVIES,
        D.DIRECTOR_ID,
        D.DIRECTOR_NAME,
        G.GENRE_ID,
        G.GENRE_NAME
    FROM
        MOVIES M
    INNER JOIN GENRES AS G ON
        M.GENRE_ID = G.GENRE_ID
    INNER JOIN DIRECTORS D ON
        M.DIRECTOR_ID = D.DIRECTOR_ID
    GROUP BY
        G.GENRE_ID,
        D.DIRECTOR_ID
    ORDER BY
        D.DIRECTOR_ID) GROUPID
INNER JOIN (
    SELECT
        DIRECTOR_ID,
        MAX(NUM_MOVIES) NUM_MOVIES
    FROM
        (
        SELECT
            COUNT(G.GENRE_NAME) AS NUM_MOVIES,
            D.DIRECTOR_ID,
            D.DIRECTOR_NAME,
            G.GENRE_ID,
            G.GENRE_NAME
        FROM
            MOVIES M
        INNER JOIN GENRES AS G ON
            M.GENRE_ID = G.GENRE_ID
        INNER JOIN DIRECTORS D ON
            M.DIRECTOR_ID = D.DIRECTOR_ID
        GROUP BY
            G.GENRE_ID,
            D.DIRECTOR_ID
        ORDER BY
            D.DIRECTOR_ID)
    GROUP BY
        DIRECTOR_ID) MAXVAL ON
    GROUPID.DIRECTOR_ID = MAXVAL.DIRECTOR_ID
    AND GROUPID.NUM_MOVIES = MAXVAL.NUM_MOVIES
GROUP BY
    GROUPID.DIRECTOR_NAME

-- 36. Indica cuál es la nacionalidad favorita de cada uno de los estudios en la producción de las películas
SELECT
    GROUPID.STUDIO_NAME,
    GROUP_CONCAT(GROUPID.NATIONALITY_NAME) AS NATIONALITY_NAME
FROM
    (
    SELECT
        COUNT(N.NATIONALITY_NAME) AS NUM_MOVIES,
        S.STUDIO_ID,
        S.STUDIO_NAME,
        N.NATIONALITY_ID,
        N.NATIONALITY_NAME
    FROM
        MOVIES M
    INNER JOIN NATIONALITIES AS N ON
        M.NATIONALITY_ID = N.NATIONALITY_ID
    INNER JOIN STUDIOS S ON
        M.STUDIO_ID = S.STUDIO_ID
    GROUP BY
        N.NATIONALITY_ID,
        S.STUDIO_ID
    ORDER BY
        S.STUDIO_ID) GROUPID
INNER JOIN (
    SELECT
        STUDIO_ID,
        MAX(NUM_MOVIES) NUM_MOVIES
    FROM
        (
        SELECT
            COUNT(N.NATIONALITY_NAME) AS NUM_MOVIES,
            S.STUDIO_ID,
            S.STUDIO_NAME,
            N.NATIONALITY_ID,
            N.NATIONALITY_NAME
        FROM
            MOVIES M
	    INNER JOIN NATIONALITIES AS N ON
	        M.NATIONALITY_ID = N.NATIONALITY_ID
	    INNER JOIN STUDIOS S ON
	        M.STUDIO_ID = S.STUDIO_ID
        GROUP BY
            N.NATIONALITY_ID,
            S.STUDIO_ID
        ORDER BY
            S.STUDIO_ID)
    GROUP BY
        STUDIO_ID) MAXVAL ON
    GROUPID.STUDIO_ID = MAXVAL.STUDIO_ID
    AND GROUPID.NUM_MOVIES = MAXVAL.NUM_MOVIES
GROUP BY
    GROUPIS.STUDIO_NAME

-- 37. Indica cuál fue la primera película que alquilaron los miembros del videoclub cuyos teléfonos tengan como último dígito el ID de alguna nacionalidad
SELECT
    MOVIERENTALS.MOVIE_NAME,
    MOVIERENTALS.MEMBER_NAME
FROM
    (
    SELECT
        MO.MOVIE_NAME,
        MMR.MOVIE_ID,
        MMR.MEMBER_ID,
        MMR.MEMBER_RENTAL_DATE,
        M.MEMBER_NAME,
        TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) AS "LAST_DIGIT"
    FROM
        MOVIES MO
    INNER JOIN
    MEMBERS_MOVIE_RENTAL MMR
    ON
        MO.MOVIE_ID = MMR.MOVIE_ID
    INNER JOIN MEMBERS M ON
        MMR.MEMBER_ID = M.MEMBER_ID
    WHERE
        TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) IN (
        SELECT
            NATIONALITY_ID
        FROM
            NATIONALITIES

 

)
    GROUP BY
        MO.MOVIE_NAME,
        MMR.MOVIE_ID,
        MMR.MEMBER_ID,
        MMR.MEMBER_RENTAL_DATE,
        M.MEMBER_NAME,
        LAST_DIGIT
    ORDER BY
        M.MEMBER_NAME

 

) MOVIERENTALS
INNER JOIN

    (
    SELECT
        MEMBER_ID,
        MIN(MEMBER_RENTAL_DATE) AS "FIRST_RENTAL"
    FROM
        (
        SELECT
            MO.MOVIE_NAME,
            MMR.MOVIE_ID,
            MMR.MEMBER_ID,
            MMR.MEMBER_RENTAL_DATE,
            M.MEMBER_NAME,
            TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) AS "LAST_DIGIT"
        FROM
            MOVIES MO
        INNER JOIN
    MEMBERS_MOVIE_RENTAL MMR
    ON
            MO.MOVIE_ID = MMR.MOVIE_ID
        INNER JOIN MEMBERS M ON
            MMR.MEMBER_ID = M.MEMBER_ID
        WHERE
            TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) IN (
            SELECT
                NATIONALITY_ID
            FROM
                NATIONALITIES

 

)
        GROUP BY
            MO.MOVIE_NAME,
            MMR.MOVIE_ID,
            MMR.MEMBER_ID,
            MMR.MEMBER_RENTAL_DATE,
            M.MEMBER_NAME,
            LAST_DIGIT
        ORDER BY
            M.MEMBER_NAME
    )
    GROUP BY
        MEMBER_ID) FIRSTRENTALS ON
    MOVIERENTALS.MEMBER_ID = FIRSTRENTALS.MEMBER_ID AND MOVIERENTALS.MEMBER_RENTAL_DATE = FIRSTRENTALS.FIRST_RENTAL
GROUP BY
    MOVIERENTALS.MOVIE_NAME,
    MOVIERENTALS.MEMBER_NAME

-- FIN DE LOS EJERCICIOS